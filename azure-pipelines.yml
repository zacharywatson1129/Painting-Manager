trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  - name: solution
    value: '**/*.sln'
  - name: buildConfiguration
    value: 'Release'

jobs:
- job: BuildAndPackage
  displayName: 'Restore, Build Library and WPF Project, and Package'
  pool:
    vmImage: 'windows-latest'
  steps:
    - checkout: self
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'
    - task: NuGetCommand@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        verbosityRestore: 'Detailed'
        packagesDirectory: '$(Build.SourcesDirectory)\packages'
    - task: VSBuild@1
      displayName: 'Clean and Build Library'
      inputs:
        solution: 'PaintingLibrary/PaintingLibrary.csproj'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/t:Clean;Build'

    - task: VSBuild@1
      displayName: 'Build WPF Project'
      inputs:
        solution: 'PaintingDetailsManager/PaintingDetailsManager.csproj'
        configuration: '$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'AFTER Building WPf Project - Listing PaintingDetailsManager\bin\Release Folder (Detailed) Contents'
      inputs:
        script: |
          echo "-----------Contents of the PaintingDetailsManager\bin\Release Directory-----------"
          dir /s $(Build.SourcesDirectory)\PaintingDetailsManager\bin\Release

    - task: PowerShell@2
      displayName: 'Create Zip File'
      inputs:
        targetType: 'inline'
        script: |
          echo "Zipping files..."
          $outputPath = '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager'
          if (-not (Test-Path -Path $outputPath)) {
            New-Item -ItemType Directory -Path $outputPath
          }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory('$(Build.SourcesDirectory)\PaintingDetailsManager\bin\Release', '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager\PaintingDetailsManager.zip')
    
    - task: CmdLine@2
      displayName: 'Check Zip File Contents'
      inputs:
        script: |
          echo "Checking contents of the zip file..."
          tar -tf "$(Build.ArtifactStagingDirectory)\PaintingDetailsManager\PaintingDetailsManager.zip"


    - task: PublishBuildArtifacts@1
      displayName: 'Publish WPF Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager\PaintingDetailsManager.zip'
        ArtifactName: 'PaintingDetailsManager'
        publishLocation: 'Container'
        ArtifactType: 'Container'

    - task: CmdLine@2
      displayName: 'Listing Artifact Staging Directory (Detailed) Contents'
      inputs:
        script: |
          echo "-----------Contents of the Artifact Staging Directory-----------"
          dir /s D:\a\1\a
          echo "-----------Contents of the PaintingDetailsManager folder inside the Artifact Staging Directory-----------"
          dir /s D:\a\1\a\PaintingDetailsManager

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'github.com_zacharywatson1129'  # Define your GitHub connection in the DevOps project settings
        repositoryName: 'zacharywatson1129/Painting-Manager'
        target: 'main'
        tagSource: 'manual'  # You can also choose 'build' if you want it to auto-tag
        tag: 'v$(Build.BuildId)'
        title: 'Release $(Build.BuildId)'
        assets: '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager\PaintingDetailsManager.zip'  # Point to your zip
