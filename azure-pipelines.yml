trigger:
  none

pr:
  branches:
    include:
      - main

variables:
  - name: solution
    value: '**/*.sln'
  - name: buildConfiguration
    value: 'Release'

jobs:
- job: BuildAndPackage
  displayName: 'Restore, Build Library and WPF Project, and Package'
  pool:
    vmImage: 'windows-latest'
  steps:
    - checkout: self
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'
    - task: NuGetCommand@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        verbosityRestore: 'Detailed'
        packagesDirectory: '$(Build.SourcesDirectory)\packages'
    - task: VSBuild@1
      displayName: 'Clean and Build Library'
      inputs:
        solution: 'PaintingLibrary/PaintingLibrary.csproj'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/t:Clean;Build'

    - task: VSBuild@1
      displayName: 'Build WPF Project'
      inputs:
        solution: 'PaintingDetailsManager/PaintingDetailsManager.csproj'
        configuration: '$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Ensure Data/Working and Data/Images Folders Exist'
      inputs:
        script: |
          echo "Creating necessary folders in Data directory..."
          if not exist "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Working" (
            mkdir "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Working"
          ) else (
            echo "Working folder already exists."
          )
          if not exist "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Images" (
            mkdir "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Images"
          ) else (
            echo "Images folder already exists."
          )

    - task: CopyFiles@2
      displayName: 'Copy Clean Database to Working Directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Clean'
        Contents: 'paintings.db'
        TargetFolder: '$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Working'

    - task: PowerShell@2
      displayName: 'Create Zip File'
      inputs:
        targetType: 'inline'
        script: |
          echo "Zipping files..."
          $outputPath = '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager.zip'
          $dataPath = '$(Build.SourcesDirectory)\PaintingDetailsManager\Data'
          # Create the zip file containing the Data folder at the root level
          if (Test-Path $outputPath) {
            Remove-Item $outputPath
          }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($dataPath, $outputPath)
          
          # Now add the bin directory to the zip file
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $binPath = '$(Build.SourcesDirectory)\PaintingDetailsManager\bin\Release'
          $tempZipPath = '$(Build.ArtifactStagingDirectory)\temp.zip'

          # Create a temporary zip file that combines both Data and bin directories
          [System.IO.Compression.ZipFile]::CreateFromDirectory($dataPath, $tempZipPath)

          # Open the temporary zip and add the bin folder
          $zip = [System.IO.Compression.ZipFile]::Open($tempZipPath, [System.IO.Compression.ZipArchiveMode]::Update)
          $zip.CreateEntryFromFile("$binPath\*","bin/")
          $zip.Dispose()

          # Move the combined zip to final destination
          Move-Item $tempZipPath $outputPath


    - task: CmdLine@2
      displayName: 'Check Zip File Contents'
      inputs:
        script: |
          echo "Checking contents of the zip file..."
          tar -tf "$(Build.ArtifactStagingDirectory)\PaintingDetailsManager.zip"

    - task: PublishBuildArtifacts@1
      displayName: 'Publish WPF Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager.zip'
        ArtifactName: 'PaintingDetailsManager'
        publishLocation: 'Container'
        ArtifactType: 'Container'

    - task: CmdLine@2
      displayName: 'Listing Artifact Staging Directory (Detailed) Contents'
      inputs:
        script: |
          echo "-----------Contents of the Artifact Staging Directory-----------"
          dir /s D:\a\1\a

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'github.com_zacharywatson1129'  # Define your GitHub connection in the DevOps project settings
        repositoryName: 'zacharywatson1129/Painting-Manager'
        target: 'main'
        tagSource: 'manual'  # You can also choose 'build' if you want it to auto-tag
        tag: 'v$(Build.BuildId)'
        title: 'Release $(Build.BuildId)'
        assets: '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager.zip'  # Point to your zip
