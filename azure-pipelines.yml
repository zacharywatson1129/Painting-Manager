trigger:
  none

pr:
  branches:
    include:
      - main

variables:
  - name: solution
    value: '**/*.sln'
  - name: buildConfiguration
    value: 'Release'

jobs:
- job: BuildAndPackage
  displayName: 'Restore, Build Library and WPF Project, and Package'
  pool:
    vmImage: 'windows-latest'
  steps:
    - checkout: self
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'
    - task: NuGetCommand@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        verbosityRestore: 'Detailed'
        packagesDirectory: '$(Build.SourcesDirectory)\packages'
    - task: VSBuild@1
      displayName: 'Clean and Build Library'
      inputs:
        solution: 'PaintingLibrary/PaintingLibrary.csproj'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/t:Clean;Build'

    - task: VSBuild@1
      displayName: 'Build WPF Project'
      inputs:
        solution: 'PaintingDetailsManager/PaintingDetailsManager.csproj'
        configuration: '$(buildConfiguration)'

    - task: CmdLine@2
      displayName: 'Ensure Data/Working and Data/Images Folders Exist'
      inputs:
        script: |
          echo "Creating necessary folders in Data directory..."
          if not exist "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Working" (
              mkdir "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Working"
          )
          if not exist "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Images" (
              mkdir "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Images"
          )

    - task: PowerShell@2
      displayName: 'Copy Clean Database to Working Directory'
      inputs:
        targetType: 'inline'
        script: |
          Copy-Item "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Clean\paintings.db" "$(Build.SourcesDirectory)\PaintingDetailsManager\Data\Working\paintings.db" -Force

    - task: PowerShell@2
      displayName: 'Create Zip File'
      inputs:
        targetType: 'inline'
        script: |
          echo "Zipping files..."
          $outputPath = '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager.zip'
          $dataPath = '$(Build.SourcesDirectory)\PaintingDetailsManager\Data'
          $binPath = '$(Build.SourcesDirectory)\PaintingDetailsManager\bin\Release'

          # Remove existing zip file if it exists
          if (Test-Path $outputPath) {
            Remove-Item $outputPath
          }

          # List the contents of the Data directory for debugging
          Get-ChildItem -Path $dataPath -Recurse

          # Check if Data folder contains Working and Images
          if (-Not (Test-Path "$dataPath\Working")) {
            Write-Host "Error: Working directory does not exist."
            exit 1
          }

          if (-Not (Test-Path "$dataPath\Images")) {
            Write-Host "Error: Images directory does not exist."
            exit 1
          }

          # List the contents of the Release directory inside bin for debugging
          Get-ChildItem -Path $binPath -Recurse

          # Check if bin\Release folder exists
          if (-Not (Test-Path $binPath)) {
            Write-Host "Error: Bin/Release directory does not exist."
            exit 1
          }

          # Create a zip file containing the Data folder and bin/Release folder
          Compress-Archive -Path "$dataPath", "$binPath" -DestinationPath $outputPath

          echo "Zip file created at: $outputPath"





    - task: CmdLine@2
      displayName: 'Check Zip File Contents'
      inputs:
        script: |
          echo "Checking contents of the zip file..."
          tar -tf "$(Build.ArtifactStagingDirectory)\PaintingDetailsManager.zip"


    - task: PublishBuildArtifacts@1
      displayName: 'Publish WPF Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager\PaintingDetailsManager.zip'
        ArtifactName: 'PaintingDetailsManager'
        publishLocation: 'Container'
        ArtifactType: 'Container'

    - task: CmdLine@2
      displayName: 'Listing Artifact Staging Directory (Detailed) Contents'
      inputs:
        script: |
          echo "-----------Contents of the Artifact Staging Directory-----------"
          dir /s D:\a\1\a
          echo "-----------Contents of the PaintingDetailsManager folder inside the Artifact Staging Directory-----------"
          dir /s D:\a\1\a\PaintingDetailsManager

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'github.com_zacharywatson1129'  # Define your GitHub connection in the DevOps project settings
        repositoryName: 'zacharywatson1129/Painting-Manager'
        target: 'main'
        tagSource: 'manual'  # You can also choose 'build' if you want it to auto-tag
        tag: 'v$(Build.BuildId)'
        title: 'Release $(Build.BuildId)'
        assets: '$(Build.ArtifactStagingDirectory)\PaintingDetailsManager\PaintingDetailsManager.zip'  # Point to your zip
